# Analysis Introduction

The intent of this exploratory analysis is to provide a guide to working with  Attributed C-Sets, otherwise known as "ACSets" (pronunciation: ah-chets).
Before we move directly into the analysis, let's discuss what an ACSet actually is.

## Background on ACSets

This type of data structure was introduced in the paper _Categorical Data Structures for Technical Computing_ and is an application of Category Theory in the domain of technical computing.
<!-- TODO: Add citation here from 1006202116335-ascets-paper.md -->
In particular, an ACSet is comprised of two species of data:

1. **Combinatorial Data** - data stored in a graph
2. **Attribute data** - the data that would be put into a data frame

To give an example, 

# Analysis Preparation

## Packages Used in Analysis

For this analysis, the following packages are used

```julia
using Catlab
```

Please see the [Appendix](#appendix) for details on these packages.

```julia, echo = false
import Catlab: CategoricalAlgebra.FreeSchema

@present TheoryWeightedGraph(FreeSchema) begin
	V::Ob
	E::Ob
	src::Hom(E,V)
	tgt::Hom(E,V)
	T::AttrType
	weight::Attr(E,T)
end
```


# Appendix

## Packages Used in Analysis

Package descriptions:

- [`CairoMakie`](https://github.com/JuliaPlots/Makie.jl/tree/master/CairoMakie) - Backend for Makie to produce static vector graphics at publication quality

- [`DataFrames`](https://github.com/JuliaData/DataFrames.jl) - Julia's dataframe handler for easily manipulating data

- [`Latexify`](https://github.com/korsbo/Latexify.jl) - Enables the conversion of Julia objects to other formats such as LaTeX or Markdown

- [`Makie`](https://github.com/JuliaPlots/Makie.jl) - Data visualization ecosystem for the Julia programming language, with high performance and extensibility

- [`Weave`](https://github.com/JunoLab/Weave.jl) - Converts Julia Markdown files to other forms of output
